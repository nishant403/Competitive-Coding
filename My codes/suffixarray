#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define S second
#define F first
#define f(i,n) for(int i=0;i<n;i++)
#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define vi vector<int>
#define pii pair<int,int>
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 
#define precise(x) fixed << setprecision(x) 

const int N = 5004;

int n;
vi sa;

vector<int> sort_cyclic_shifts(string const& s) 
{
    int n = s.size();
    const int alphabet = 256;
    
    vector<int> p(n), c(n), cnt(max(alphabet, n), 0);
    for (int i = 0; i < n; i++)
        cnt[s[i]]++;
    for (int i = 1; i < alphabet; i++)
        cnt[i] += cnt[i-1];
    for (int i = 0; i < n; i++)
        p[--cnt[s[i]]] = i;
    c[p[0]] = 0;
    int classes = 1;
    for (int i = 1; i < n; i++) {
        if (s[p[i]] != s[p[i-1]])
            classes++;
        c[p[i]] = classes - 1;
    }
    
    vector<int> pn(n), cn(n);
    for (int h = 0; (1 << h) < n; ++h) {
        for (int i = 0; i < n; i++) {
            pn[i] = p[i] - (1 << h);
            if (pn[i] < 0)
                pn[i] += n;
        }
        fill(cnt.begin(), cnt.begin() + classes, 0);
        for (int i = 0; i < n; i++)
            cnt[c[pn[i]]]++;
        for (int i = 1; i < classes; i++)
            cnt[i] += cnt[i-1];
        for (int i = n-1; i >= 0; i--)
            p[--cnt[c[pn[i]]]] = pn[i];
        cn[p[0]] = 0;
        classes = 1;
        for (int i = 1; i < n; i++) {
            pair<int, int> cur = {c[p[i]], c[(p[i] + (1 << h)) % n]};
            pair<int, int> prev = {c[p[i-1]], c[(p[i-1] + (1 << h)) % n]};
            if (cur != prev)
                ++classes;
            cn[p[i]] = classes - 1;
        }
        c.swap(cn);
    }
    return p;
}

string ss;

void create(string & s)
{
    ss = s;
    s += '$';   
    sa = sort_cyclic_shifts(s);
    sa.erase(sa.begin());
}

vi go[N];

int get(int mid,string & s)
{
   int id = sa[mid];
   int len = n - id;
   int res = 0;
    
   for(int i=0;i<s.length() && id+i<n;i++)
   {
      if(s[i] > ss[id+i]) return 1;
      else if(s[i] < ss[id+i]) return -1;
   }
    
   if(s.length() <= len) return 0;
   return 1;
}

void find(string & s)
{
    int len = s.length();
    
    //leftmost and rightmost occurence of s in suffix array.
    
    int right = -1;
    int l = 0;
    int r = n-1;
    
    while(l<=r)
    {
        int mid = (l+r)/2;
        
        int v = get(mid,s);
        
        if(v == 0)
        {
          right = max(right,mid);
          l = mid + 1;
        }
        else if(v > 0) l = mid + 1;  
        else r = mid - 1;
    }
    
    if(right == -1) return;
    
    int left = n;
    l = 0;
    r = n-1;
    
    while(l<=r)
    {
        int mid = (l+r)/2;
        
        int v = get(mid,s);
        
        if(v == 0)
        {
          left = min(left,mid);
          r = mid - 1;
        }
        else if(v > 0) l = mid + 1;  
        else r = mid - 1;
    }
    
    for(int i=left;i<=right;i++) go[sa[i]+len].pb(len);
}

const int MOD = 1e9+7;

int dp[N];

void solve()
{
    string s;
    cin >> s;
    
    n = s.length();
    
    create(s);
    
    int k;
    cin >> k;
    
    f(i,k)
    {
        cin >> s;
        find(s);
    }
        
    dp[0] = 1;
    
    
    for(int i=1;i<=n;i++)
        for(auto z : go[i])
    {
        dp[i] = (dp[i] + dp[i-z])%MOD;
    }
    cout << dp[n];
}

signed main()
{
    fast;
    
    int t = 1;
    
//    cin >> t;
    
    while(t--)
        
    solve();
}
